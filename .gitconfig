[core]
	editor = nano
	whitespace = trailing-space,space-before-tab
	autocrlf = false
	ignorecase = true

[color]
    ui = auto
  [color "branch"]
    current = yellow reverse
    local = yellow
    remote = green
  [color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red bold
    new = green bold
  [color "status"]
    added = yellow
    changed = green
    untracked = cyan

[alias]
    status = status -bs
    s  = status --short
    st = status -sb
    ci = commit
    br = branch
    co = checkout
    df = diff
    dc = diff --cached
    lg = log -p
    lall = log --graph --decorate --pretty=oneline --abbrev-commit
    lalla = log --graph --decorate --pretty=oneline --abbrev-commit --all
    lol = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    lola = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative --all
    ls = ls-files
    wip = commit -am wip
    unwip = !bash -c '[[ "`git log --pretty=%s -n 1`" == "wip" ]] && git reset HEAD^'

    # Find branch's branching-off point (http://stackoverflow.com/questions/1527234/finding-a-branch-point-with-git)
    oldest-ancestor = !bash -c 'diff --old-line-format='' --new-line-format='' <(git rev-list --first-parent "${1:-master}") <(git rev-list --first-parent "${2:-HEAD}") | head -1' -
    bdiff = !bash -c \"git diff `git oldest-ancestor`..\"
    blog = !bash -c \"git log `git oldest-ancestor`.. --oneline\"

    # Show files ignored by git:
    ign = ls-files -o -i --exclude-standard

[difftool]
	prompt = false
        tool = meld

[difftool "meld"]
	cmd = meld \"$LOCAL\" \"$REMOTE\"
[push]
	default = current
[diff]
	tool = meld
[rerere]
	enabled = true
